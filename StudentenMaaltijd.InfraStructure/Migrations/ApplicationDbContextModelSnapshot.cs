// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentenMaaltijd.Entity.Repository.DbContext;

namespace StudentenMaaltijd.InfraStructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StudentenMaaltijd.Entity.Entity.Meal", b =>
                {
                    b.Property<int>("MealId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("MaxAllowedGuests");

                    b.Property<string>("MealName");

                    b.Property<DateTime>("PreperationTime");

                    b.Property<decimal>("Price");

                    b.HasKey("MealId");

                    b.ToTable("Meals");

                    b.HasData(
                        new { MealId = 1, Description = "Super lekkere Chili", MaxAllowedGuests = 6, MealName = "Chili con carne", PreperationTime = new DateTime(2019, 1, 23, 22, 3, 57, 343, DateTimeKind.Local), Price = 7.00m },
                        new { MealId = 2, Description = "Super lekkere spaghetti", MaxAllowedGuests = 6, MealName = "Spaghetti", PreperationTime = new DateTime(2019, 1, 21, 22, 3, 57, 345, DateTimeKind.Local), Price = 2.00m },
                        new { MealId = 3, Description = "Super lekkere stampot", MaxAllowedGuests = 6, MealName = "Stampot", PreperationTime = new DateTime(2019, 1, 22, 22, 3, 57, 345, DateTimeKind.Local), Price = 5.00m }
                    );
                });

            modelBuilder.Entity("StudentenMaaltijd.Entity.Entity.MealStudent", b =>
                {
                    b.Property<int>("MealId");

                    b.Property<int>("StudentId");

                    b.Property<int>("MealStudentId");

                    b.Property<string>("Role");

                    b.HasKey("MealId", "StudentId");

                    b.HasAlternateKey("MealStudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("MealStudents");

                    b.HasData(
                        new { MealId = 3, StudentId = 3, MealStudentId = 1, Role = "kok" },
                        new { MealId = 3, StudentId = 1, MealStudentId = 2, Role = "gast" },
                        new { MealId = 3, StudentId = 2, MealStudentId = 3, Role = "gast" },
                        new { MealId = 3, StudentId = 4, MealStudentId = 4, Role = "gast" }
                    );
                });

            modelBuilder.Entity("StudentenMaaltijd.Entity.Entity.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("StudentName");

                    b.HasKey("StudentId");

                    b.ToTable("Students");

                    b.HasData(
                        new { StudentId = 1, Email = "wessel.vrolijks@gmail.com", PhoneNumber = "0681839791", StudentName = "Wessel Vrolijks" },
                        new { StudentId = 2, Email = "rvgoor@gmail.com", PhoneNumber = "0612345678", StudentName = "Ruben van Goor" },
                        new { StudentId = 3, Email = "mvbergen@gmail.com", PhoneNumber = "06456925", StudentName = "Milan van Bergen" },
                        new { StudentId = 4, Email = "svwichen@gmail.com", PhoneNumber = "0642376589", StudentName = "Stijn van Wichen" },
                        new { StudentId = 5, Email = "ddgroot@gmail.com", PhoneNumber = "0612078506", StudentName = "Derk de Groot" }
                    );
                });

            modelBuilder.Entity("StudentenMaaltijd.Entity.Entity.MealStudent", b =>
                {
                    b.HasOne("StudentenMaaltijd.Entity.Entity.Meal", "Meal")
                        .WithMany("MealStudents")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StudentenMaaltijd.Entity.Entity.Student", "Student")
                        .WithMany("MealStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
